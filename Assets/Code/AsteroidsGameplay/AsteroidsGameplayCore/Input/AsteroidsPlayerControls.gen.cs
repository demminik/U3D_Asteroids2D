//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Asteroids2D.Gameplay.Input
{
    public partial class @AsteroidsPlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @AsteroidsPlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerShip"",
            ""id"": ""2c0eb32f-ffcd-4240-8c92-8ebb8de325d6"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""803a85e3-1655-4970-85e2-e14a3a5faf67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""2a22b3dd-6497-4889-a452-809a46cf60d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Weapon1"",
                    ""type"": ""Button"",
                    ""id"": ""9cc2b663-5767-4539-b455-dd669c40a35e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon2"",
                    ""type"": ""Button"",
                    ""id"": ""31071c26-08d3-4975-bbe6-8a9b9251deaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a481d44c-c110-40a5-aa6b-aa5111007093"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""16d09435-a894-4a52-8bfb-27c1fbe56984"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b88f0d56-f7c9-4eef-964d-0e960b5ebe6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f79bfefc-4652-4979-bd24-f7609601fc01"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""efc30858-481c-4135-8552-656b74471fe6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Weapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a07da2f9-2d8a-49e6-ad1d-d97a683aa767"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Weapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse&Keyboard"",
            ""bindingGroup"": ""Mouse&Keyboard"",
            ""devices"": []
        }
    ]
}");
            // PlayerShip
            m_PlayerShip = asset.FindActionMap("PlayerShip", throwIfNotFound: true);
            m_PlayerShip_Accelerate = m_PlayerShip.FindAction("Accelerate", throwIfNotFound: true);
            m_PlayerShip_Rotate = m_PlayerShip.FindAction("Rotate", throwIfNotFound: true);
            m_PlayerShip_Weapon1 = m_PlayerShip.FindAction("Weapon1", throwIfNotFound: true);
            m_PlayerShip_Weapon2 = m_PlayerShip.FindAction("Weapon2", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerShip
        private readonly InputActionMap m_PlayerShip;
        private List<IPlayerShipActions> m_PlayerShipActionsCallbackInterfaces = new List<IPlayerShipActions>();
        private readonly InputAction m_PlayerShip_Accelerate;
        private readonly InputAction m_PlayerShip_Rotate;
        private readonly InputAction m_PlayerShip_Weapon1;
        private readonly InputAction m_PlayerShip_Weapon2;
        public struct PlayerShipActions
        {
            private @AsteroidsPlayerControls m_Wrapper;
            public PlayerShipActions(@AsteroidsPlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Accelerate => m_Wrapper.m_PlayerShip_Accelerate;
            public InputAction @Rotate => m_Wrapper.m_PlayerShip_Rotate;
            public InputAction @Weapon1 => m_Wrapper.m_PlayerShip_Weapon1;
            public InputAction @Weapon2 => m_Wrapper.m_PlayerShip_Weapon2;
            public InputActionMap Get() { return m_Wrapper.m_PlayerShip; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerShipActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerShipActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Add(instance);
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Weapon1.started += instance.OnWeapon1;
                @Weapon1.performed += instance.OnWeapon1;
                @Weapon1.canceled += instance.OnWeapon1;
                @Weapon2.started += instance.OnWeapon2;
                @Weapon2.performed += instance.OnWeapon2;
                @Weapon2.canceled += instance.OnWeapon2;
            }

            private void UnregisterCallbacks(IPlayerShipActions instance)
            {
                @Accelerate.started -= instance.OnAccelerate;
                @Accelerate.performed -= instance.OnAccelerate;
                @Accelerate.canceled -= instance.OnAccelerate;
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
                @Weapon1.started -= instance.OnWeapon1;
                @Weapon1.performed -= instance.OnWeapon1;
                @Weapon1.canceled -= instance.OnWeapon1;
                @Weapon2.started -= instance.OnWeapon2;
                @Weapon2.performed -= instance.OnWeapon2;
                @Weapon2.canceled -= instance.OnWeapon2;
            }

            public void RemoveCallbacks(IPlayerShipActions instance)
            {
                if (m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerShipActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerShipActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerShipActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerShipActions @PlayerShip => new PlayerShipActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse&Keyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        public interface IPlayerShipActions
        {
            void OnAccelerate(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnWeapon1(InputAction.CallbackContext context);
            void OnWeapon2(InputAction.CallbackContext context);
        }
    }
}
